/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aluraoracle.hotelalura.prueba;

import com.aluraoracle.hotelalura.DAO.DetalleReservaDao;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author guima
 */
public class pruebaCalendar extends javax.swing.JFrame {

    private DetalleReservaDao detalleReservaDao;

    /**
     * Creates new form pruebaCalendar
     */
    public pruebaCalendar() {
        initComponents();
        txtFecha.getDateEditor().setEnabled(false);
        txtFecha.setDateFormatString("dd/MM/yyyy");
        txtFecha2.getDateEditor().setEnabled(false);
        txtFecha2.setDateFormatString("dd/MM/yyyy");

        detalleReservaDao = new DetalleReservaDao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFecha2 = new com.toedter.calendar.JDateChooser();
        btnValidar = new javax.swing.JButton();
        txtFecha = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtFecha2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFecha2PropertyChange(evt);
            }
        });

        btnValidar.setText("Validar");
        btnValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarActionPerformed(evt);
            }
        });

        txtFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtFechaPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(btnValidar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(txtFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(68, 68, 68)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(99, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(txtFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnValidar)
                .addGap(91, 91, 91))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(202, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed
        // Obtener fecha actual
        Date fechaActual = new Date();
        
        Date fechaCheckIn = txtFecha.getDate();
        Date fechaCheckOut = txtFecha2.getDate();

        if (txtFecha.getDate() != null && txtFecha2.getDate() != null) {
            if (convertirAMedianoche(fechaCheckIn).compareTo(convertirAMedianoche(fechaActual)) >= 0) {
                if (isValidDateRange(txtFecha.getDate(), txtFecha2.getDate())) {
                    System.out.println("válidas");
                    boolean habitacionDisponible = detalleReservaDao.habitacionDisponible(1L, convertirFecha(fechaCheckIn), convertirFecha(fechaCheckOut));
                    System.out.println(habitacionDisponible);
                } else {
                    System.out.println("rangos no válidos");
                }
            }else {
                JOptionPane.showMessageDialog(this, "La fecha de CheckIn debe ser mayor o igual a la fecha actual", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            System.out.println("Diligencia en las fechas");
        }
    }//GEN-LAST:event_btnValidarActionPerformed

    private void txtFecha2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtFecha2PropertyChange

    }//GEN-LAST:event_txtFecha2PropertyChange

    private void txtFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtFechaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pruebaCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pruebaCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pruebaCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pruebaCalendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pruebaCalendar().setVisible(true);
            }
        });
    }

    private static boolean isValidDateRange(Date fechaA, Date fechaB) {
        // Verificar si fechaA es menor que fechaB
        if (fechaA.before(fechaB)) {
            // Calcular la diferencia en días
            long diferenciaEnMilisegundos = fechaB.getTime() - fechaA.getTime();
            long milisegundosEnUnDia = 24 * 60 * 60 * 1000;
            long diferenciaEnDias = diferenciaEnMilisegundos / milisegundosEnUnDia;

            // Verificar si la diferencia es al menos de un día
            return diferenciaEnDias >= 1;
        }

        return false;
    }

    public static Date convertirAMedianoche(Date fecha) {
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        calendar.setTime(fecha);
        calendar.set(java.util.Calendar.HOUR_OF_DAY, 0);
        calendar.set(java.util.Calendar.MINUTE, 0);
        calendar.set(java.util.Calendar.SECOND, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime();
    }
    
    public static Date convertirFecha(Date date){
        Date fecha = null;
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaFormateada = formato.format(date);
        System.out.println(fechaFormateada);
        try {
            fecha = formato.parse(fechaFormateada);
        } catch (ParseException ex) {
            Logger.getLogger(pruebaCalendar.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("fecha "+fecha);
        return fecha;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidar;
    private com.toedter.calendar.JDateChooser txtFecha;
    private com.toedter.calendar.JDateChooser txtFecha2;
    // End of variables declaration//GEN-END:variables
}
